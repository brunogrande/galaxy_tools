<tool id="lumpy" name="LUMPY" version="0.2.9">
	<description> 
		a probabilistic framework for structural variant discovery
	</description>
	<requirements>
		<requirement type="package" version="0.1.19">samtools</requirement>
		<requirement type="package" version="0.2.9">lumpy</requirement>
		<requirement type="set_environment" version="0.2.9">LUMPY_SCRIPTS</requirement>
		<requirement type="package" version="1.9">numpy</requirement>
	</requirements>	
	<command>		
		<!-- Add Predefined Option Sets -->
		<!-- TO DO -->

		<!-- Create Symbolic links to bam and bam indexes -->
		#for $i, $s in enumerate($sample)
			ln -s $s.bam ./input$(i).bam;
			ln -s $s.bam.metadata.bam_index ./input$(i).bam.bai;
		#end for

		echo 'SYMBOLIC LINKS CREATED' >&amp2;

		<!-- Check if a all IDs are non-empty -->
		#set $id_all_good = True
		#for $i, $s in enumerate($sample)
			#if $s.id == ""
				#set $id_all_good = False
			#end if
		#end for
	
		echo 'CHECKED FOR EMPTY IDS' >&amp2;

		<!-- Ensure that all IDs are Unique -->
		#set $id_dictionary = {}
		#if $id_all_good
			#for $i, $s in enumerate($sample)
				#set $id = $s.id
				#if $id_dictionary.has_key($id)
					#set $id_all_good = False
				#else
					#set $id_dictionary[$id] = ''
				#end if
			#end for
		#end if
		
		echo 'CHECKED FOR UNIQUE IDS' >&amp2;

		#if not $id_all_good
			<!-- ALL IDs will be made numeric -->
			#for $i, $s in enumerate($sample)
				#set $s.id = $i
			#end for
		#end if
		
		echo 'ADJUSTED IDS IF NECESSARY' >&amp2;

		<!-- EXTRACT DISCORDANT PAIRED END ALIGNMENTS -->
		#for $i, $s in enumerate($sample) 
			samtools view -F 1294 -b ./input$(i).bam > ./input$(i).pe.bam;
		#end for
	
		echo 'EXTRACTED DISCORDANT PAIRED END ALIGNMENTS' >&amp2;

		<!-- EXTRACT SPLIT-READ ALIGNMENTS -->
		#for $i, $s in enumerate($sample)
			samtools view -h ./input$(i).bam | \$LUMPY_SCRIPTS/extractSplitReads_BwaMem -i stdin | samtools view -Sb - > ./input$(i).sr.bam;
		#end for
	
		echo 'EXTRACTED SPLIT-READ ALIGNMENTS' >&amp2;

		<!-- SORT BAMS AGAIN -->
		#for $i, $s in enumerate($sample)
			samtools sort ./input$(i).pe.bam ./input$(i).pe.sort;
			samtools sort ./input$(i).sr.bam ./input$(i).sr.sort;
		#end for
		
		echo 'SORTED BAMS' >&amp2;

		<!-- CREATE HISTO FILE -->
		#for $i, $s in enumerate($sample)
			samtools view ./input$(i).bam | tail -n+100000 | \$LUMPY_SCRIPTS/pairend_distro.py -r 150 -X 4 -N 10000 -o ./input$(i).pe.histo > ./input$(i).stats;
		#end for
	
		echo 'CREATED HISTO FILE' >&amp2;

		<!-- Store MEAN and STD in nice format -->
		#for $i, $s in enumerate($sample)
			cat -t ./input$(i).stats | sed s/\\^\\I/,/g > stats$(i).txt;
		#end for

		echo 'CREATED STATS FILE' >&amp2;

		<!-- RUN LUMPY -->

	  	lumpy
	  	-e
	  	-tt $tt
	  	-mw $mw
	  	#if $x
	  		-x $x
	  	#end if
		#for $i, $s in enumerate($sample)
			-pe
				bam_file:input$(i).pe.sort.bam,histo_file:input$(i).pe.histo,\$(cat stats$(i).txt),read_length:$s.options.pe_read_length,min_non_overlap:$s.options.pe_min_non_overlap,discordant_z:$s.options.pe_discordant_z,back_distance:$s.options.pe_back_distance,min_mapping_threshold:$s.options.pe_min_mapping_threshold,weight:$s.options.pe_weight,id:PE-$(s.id)
				
			-sr
				bam_file:input$(i).sr.sort.bam,back_distance:$s.options.sr_back_distance,min_mapping_threshold:$s.options.sr_min_mapping_threshold,weight:$s.options.sr_weight,id:SR-$(s.id),min_clip:$s.options.sr_min_clip
		#end for
		> $outfile;

		echo 'RAN LUMPY';

	</command>
	<inputs>
		<param type="data" format="bed" name="x" label="Exluded Regions BED file" optional="true"/>
		<param type="integer" value="5" name="mw" label="Minimum Weight for Call"/>
		<param type="integer" value="3" name="tt" label="Trim Threshold"/>
		<repeat name="sample" title="Sample" min="1" default="1">
			<param type="data" format="bam" name="bam" label="BWA-MEM Aligned BAM" help="BAM must be sorted and aligned with BWA-MEM"/>
			<param type="text" size="15" value="" name="id" optional="true" label="Sample ID"/>
			<conditional name="options">
				<param type="select" name="optionSet" multiple="false" label="Option Set">
					<option value="high" selected="true">High Stringency</option>
					<option value="low">Low Stringency</option>
					<option value="more">More Options</option>
				</param>
				<when value="high"/>
				<when value="low"/>
				<when value="more">
					<param type="integer" name="pe_back_distance" value="20" label="Paired End Back Distance" help="Distance into the read to add the breakpoint interval"/>
					<param type="integer" name="pe_min_mapping_threshold" value="1" label="Paired End Min Mapping Threshold" help="Minimum mapping quality that a read must have to be considered"/>
					<param type="integer" name="pe_weight" value="1" label="Paired End Weight" help="Weight of each piece of evidence from this sample"/>
					<param type="integer" name="pe_discordant_z" value="4" label="Paired End Discordant Value" help="Number of standard deviations away from the mean to be considered as a normal library size"/>
					<param type="integer" name="pe_read_length" value="150" label="Paired End Read Length" help="Length of sequenced reads"/>
					<param type="integer" name="pe_min_non_overlap" value="150" label="Paired End Min Non Overlap" help="Number of base pair positions that must be unique to each end of a read pair"/>
					<param type="integer" name="sr_back_distance" value="20" label="Split Read Back Distance" help="Distance into the read to add the breakpoint interval"/>
					<param type="integer" name="sr_min_mapping_threshold" value="1" label="Split Read Min Mapping Threshold" help="Minimum mapping quality that a read must have to be considered"/>
					<param type="integer" name="sr_weight" value="1" label="Split Read Weight" help="Weight of each piece of evidence from this sample"/>
					<param type="integer" name="sr_min_clip" value="1" label="Spliy Read Min Clip" help="Minimum number of clipped bases to consider in a split read"/>	
				</when>
			</conditional>
		</repeat>
	</inputs>
	<outputs>
		<data type="vcf" name="outfile"/>
	</outputs>
</tool>